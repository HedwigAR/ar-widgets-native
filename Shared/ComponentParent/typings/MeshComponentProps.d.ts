import { ActionValue, EditableValue, DynamicValue, NativeImage } from "mendix";
import { Big } from "Big.js";
import { MaterialOptionEnum } from "./MxBaseProps";
export type MxPhysicsTypeEnum = "Kinematic" | "Dynamic" | "Static";
export type MxLightingTypeEnum = "Simple" | "PBR";
export type MxDragTypeEnum = "FixedDistance" | "FixedToWorld";
export type MxTypeEnum = "Expression" | "Attribute" | "Static";

export type MeshComponentProps = {
    mxPositionType: MxTypeEnum;
    mxPositionXStat: Big;
    mxPositionYStat: Big;
    mxPositionZStat: Big;
    mxPositionXAtt?: EditableValue<Big>;
    mxPositionYAtt?: EditableValue<Big>;
    mxPositionZAtt?: EditableValue<Big>;
    mxPositionXExpr?: DynamicValue<Big>;
    mxPositionYExpr?: DynamicValue<Big>;
    mxPositionZExpr?: DynamicValue<Big>;
    mxRotationType: MxTypeEnum;
    mxRotationXStat: Big;
    mxRotationYStat: Big;
    mxRotationZStat: Big;
    mxRotationXAtt?: EditableValue<Big>;
    mxRotationYAtt?: EditableValue<Big>;
    mxRotationZAtt?: EditableValue<Big>;
    mxRotationXExpr?: DynamicValue<Big>;
    mxRotationYExpr?: DynamicValue<Big>;
    mxRotationZExpr?: DynamicValue<Big>;
    mxScaleType: MxTypeEnum;
    mxScaleXStat: Big;
    mxScaleYStat: Big;
    mxScaleZStat: Big;
    mxScaleXAtt?: EditableValue<Big>;
    mxScaleYAtt?: EditableValue<Big>;
    mxScaleZAtt?: EditableValue<Big>;
    mxScaleXExpr?: DynamicValue<Big>;
    mxScaleYExpr?: DynamicValue<Big>;
    mxScaleZExpr?: DynamicValue<Big>;
    mxOpacity?: DynamicValue<Big>;
    mxRoughness?: DynamicValue<Big>;
    mxMetalness?: DynamicValue<Big>;
    mxMaterialOption?: MaterialOptionEnum;
    mxMaterialColor?: string;
    mxLightingType?: MxLightingTypeEnum;
    mxUseDraggingInteraction?: boolean;
    mxUsePinchInteraction?: boolean;
    mxDraggingEnabled?: boolean;
    mxDragType?: MxDragTypeEnum;
    mxOnDrag?: ActionValue;
    mxPinchEnabled?: boolean;
    mxPinchToScaleEnabled?: boolean;
    mxOnPinchActionValue?: ActionValue;
    mxOnClick?: ActionValue;
    mxOnHoverEnter?: ActionValue;
    mxOnHoverExit?: ActionValue;
};
